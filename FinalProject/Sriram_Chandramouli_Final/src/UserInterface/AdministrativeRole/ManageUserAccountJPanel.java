/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdministrativeRole;

import Business.Advertiser.Advertiser;
import Business.Advertiser.AdvertiserDirectory;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Person.Person;
import Business.Publisher.Publisher;
import Business.Publisher.PublisherDirectory;
import Business.Role.Role;
import Business.Supplier.Supplier;
import Business.Supplier.SupplierDirectory;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sriram
 */
public class ManageUserAccountJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageUserAccountJPanel
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    SupplierDirectory supplierDirectory;
    PublisherDirectory publisherDirectory;
    AdvertiserDirectory advertiserDirectory;
    EcoSystem system;
    
    public ManageUserAccountJPanel(JPanel upc,Enterprise enterprise,SupplierDirectory supplierDirectory,PublisherDirectory publisherDirectory,AdvertiserDirectory advertiserDirectory, EcoSystem system) {
        initComponents();
        this.userProcessContainer = upc;
        this.enterprise = enterprise;
        this.supplierDirectory = supplierDirectory;
        this.publisherDirectory = publisherDirectory;
        this.advertiserDirectory = advertiserDirectory;
        this.system = system;
        
        populateUserAccountTable();
        populateOrgCombo();
        
        
    }
    
    private void populateOrgCombo() {
        organizationJComboBox.removeAllItems();;
        for(Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if((!o.getName().equals("Admin Organization")) && (!o.getName().equals("Consumer Organization"))) {
           System.out.println("Org is" + o);
            organizationJComboBox.addItem(o);
            }
        }
    }
    
    private void populateRoleCombo(Organization org) {
        roleJComboBox.removeAllItems();
        
        for (Role role : org.getSupportedRole()) {
            
            System.out.println("Role is" + role);
            roleJComboBox.addItem(role);
            
        }
    }
    private void populatePerson(Organization o) {
        
        personJComboBox.removeAllItems();
        
            if("Supplier Organization".equals(String.valueOf(o))) {
                
                for(Supplier supplier : supplierDirectory.getSupplierList()) {
                   personJComboBox.addItem(supplier);
                }
            } else if("Publisher Organization".equals(String.valueOf(o))) {
          
                for(Publisher publisher : publisherDirectory.getPublisherList()) {
                   personJComboBox.addItem(publisher);
                }
            } else if("Advertiser Organization".equals(String.valueOf(o))) {
                
                for(Advertiser advertiser : advertiserDirectory.getAdvertiserList()) {
                    personJComboBox.addItem(advertiser);
                }
            }
    }
    private void populateUserAccountTable() {
        DefaultTableModel dtm = (DefaultTableModel)userAccountJTable.getModel();
        dtm.setRowCount(0);
        
        for(Organization o: enterprise.getOrganizationDirectory().getOrganizationList()) {
             System.out.println("Orgintab is" + o);
            
            for(UserAccount ua:  o.getUserAccountDirectory().getUserAccountList()) {
              System.out.println("UA is" + ua);  
            Object row[] = new Object[2];
            row[0] = ua;
            row[1] = ua.getRole();
        
            dtm.addRow(row);
        }
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userAccountJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        organizationJComboBox = new javax.swing.JComboBox();
        roleJComboBox = new javax.swing.JComboBox();
        personJComboBox = new javax.swing.JComboBox();
        userNameJTextField = new javax.swing.JTextField();
        PasswordField = new javax.swing.JPasswordField();
        backJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        createUaJButton = new javax.swing.JButton();
        deleteUaJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("MANAGE USER ACCOUNT");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 40, 310, 30));

        userAccountJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserName", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userAccountJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 120, 440, 100));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Organization");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 274, 100, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Role");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 320, 100, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Person");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 370, 110, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("UserName");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 420, 100, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("PasssWord");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 470, 100, 30));

        organizationJComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        organizationJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                organizationJComboBoxActionPerformed(evt);
            }
        });
        add(organizationJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 270, 220, 30));

        roleJComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        roleJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleJComboBoxActionPerformed(evt);
            }
        });
        add(roleJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 320, 220, 30));

        personJComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        add(personJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 370, 220, 30));

        userNameJTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        add(userNameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 420, 220, 30));

        PasswordField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        add(PasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 470, 220, 30));

        backJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 600, 120, 30));

        refreshJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 540, 120, 30));

        createUaJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        createUaJButton.setText("Create UserAccount >>");
        createUaJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createUaJButtonActionPerformed(evt);
            }
        });
        add(createUaJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 540, 220, 30));

        deleteUaJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        deleteUaJButton.setText("Delete UserAccount >>");
        deleteUaJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUaJButtonActionPerformed(evt);
            }
        });
        add(deleteUaJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 600, 220, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void organizationJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_organizationJComboBoxActionPerformed

        Organization org = (Organization)organizationJComboBox.getSelectedItem();
        if(org!=null) {
            populateRoleCombo(org);
            populatePerson(org);
        }
    }//GEN-LAST:event_organizationJComboBoxActionPerformed

    private void roleJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleJComboBoxActionPerformed

    }//GEN-LAST:event_roleJComboBoxActionPerformed

    private void createUaJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createUaJButtonActionPerformed
        String userName = userNameJTextField.getText();
        char[] pass = PasswordField.getPassword();
        String pwd = String.valueOf(pass);
        Organization o = (Organization)organizationJComboBox.getSelectedItem();
        String o1 = String.valueOf(organizationJComboBox.getSelectedItem());
        if(userNameJTextField.getText().equals("") || pwd.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter all the fields");
            return;
        }
       /*    if(o1.equals("Admin Organization")) {
               
               JOptionPane.showMessageDialog(null, "UserAccount already exists for Admin");
               return; 
           } */
           
      /*     if(o1.equals("Consumer Organization")) {
               
               JOptionPane.showMessageDialog(null, "UserAccount needs to be (or) created in signup for Consumers");
               return; 
           } */
           
           for (Network n : system.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                  for (UserAccount ua1 : e.getUserAccountDirectory().getUserAccountList()) {
                        if (ua1.getUserName().equals(userName)) {
                            JOptionPane.showMessageDialog(null, "UserName already exists. Please use another name");
                            return;
                        }
                    } 
                
            }
        }
        
        for (Network n1 : system.getNetworkList()) {
            for (Enterprise e1 : n1.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organization org : e1.getOrganizationDirectory().getOrganizationList()) {
                  for (UserAccount ua2 : org.getUserAccountDirectory().getUserAccountList()) {
                        if (ua2.getUserName().equals(userName)) {
                            JOptionPane.showMessageDialog(null, "UserName already exists. Please use another name");
                            return;
                        }
                    } 
                }
            }
        }
        
        for (UserAccount ua2 : system.getUserAccountDirectory().getUserAccountList()) {
            
            if (ua2.getUserName().equals(userName)) {
                JOptionPane.showMessageDialog(null, "UserName already exists. Please use another name");
                            return;
            }
            
        }
       
        Role r = (Role)roleJComboBox.getSelectedItem();
        String s = String.valueOf(roleJComboBox.getSelectedItem());
        Person person = null;
        if(s.equals("SupplierRole")) {
            person = (Supplier) personJComboBox.getSelectedItem();
        } else if(s.equals("PublisherRole")) {
            person = (Publisher) personJComboBox.getSelectedItem();
        } else if(s.equals("AdvertiserRole")) {
            person = (Advertiser) personJComboBox.getSelectedItem();
        }
     
        
        for(UserAccount userAccount : o.getUserAccountDirectory().getUserAccountList()) {
            if(userAccount.getPerson().equals(person)) {
                JOptionPane.showMessageDialog(null, "You have already created an account for this person");
                return;
     
            }
        }
        
        if(person == null) {
            JOptionPane.showMessageDialog(null, "Please create user before creating useraccount");
            return;
        }
        o.getUserAccountDirectory().createUserAccount(userName, pwd, person, r);
        JOptionPane.showMessageDialog(null, "UserAccount has been successfully created");
        
        
        userNameJTextField.setText("");
        PasswordField.setText("");
    }//GEN-LAST:event_createUaJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateUserAccountTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void deleteUaJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUaJButtonActionPerformed
        int selectedRow = userAccountJTable.getSelectedRow();
        if(selectedRow>=0){
            int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete", "Warning", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                UserAccount ua  =(UserAccount)userAccountJTable.getValueAt(selectedRow,0);
                Organization o = (Organization)organizationJComboBox.getSelectedItem();
                o.getUserAccountDirectory().deleteUserAccount(ua);
                populateUserAccountTable();
            }
        }
        else{
            JOptionPane.showMessageDialog(this,"Please select an Organization to delete");
        }
    }//GEN-LAST:event_deleteUaJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton createUaJButton;
    private javax.swing.JButton deleteUaJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox organizationJComboBox;
    private javax.swing.JComboBox personJComboBox;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JComboBox roleJComboBox;
    private javax.swing.JTable userAccountJTable;
    private javax.swing.JTextField userNameJTextField;
    // End of variables declaration//GEN-END:variables
}
