/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SystemAdmin;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.AdminOrganization;
import Business.Organization.ConsumerOrganization;
import Business.Organization.Organization;
import Business.Person.Person;
import Business.Role.AdminRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sriram
 */
public class ManageEnterpriseAdminJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
    
    public ManageEnterpriseAdminJPanel(JPanel upc, EcoSystem system) {
        initComponents();
        
        this.userProcessContainer = upc;
        this.system = system;
        
        populateTable();
        populateNetworkComboBox();
    }
    
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseJTable.getModel();

        model.setRowCount(0);
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (Person person : enterprise.getPersonDirectory().getPersonList()) {
                for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                    Object[] row = new Object[4];
                    row[0] = enterprise.getName();
                    row[1] = network.getName();
                    row[2] = userAccount;
                    row[3] = person;

                    model.addRow(row);
                    
                }
                                                      
                }
            }
        }
    }
    
    private void populateNetworkComboBox(){
        networkJComboBox.removeAllItems();
        
        for (Network network : system.getNetworkList()){
            networkJComboBox.addItem(network);
        }
    }
    
    private void populateEnterpriseComboBox(Network network){
        enterpriseJComboBox.removeAllItems();
        
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()){
            enterpriseJComboBox.addItem(enterprise);
        }
        
    }
    
    private Boolean validation() {
        
        String firstName = firstNameJTextField.getText();
        for(int i = 0; i <firstName.length();i++){
        char c = firstName.charAt(i);  
        if((c<97 || c>122) && (c<65 || c>90)) {
         JOptionPane.showMessageDialog(null, "Enterprise Admin Name field should contain only alphabet", "Mismatch", JOptionPane.WARNING_MESSAGE);
         return false;
        }
        }
        
        String lastName = lastNameJTextField.getText();
        for(int i = 0; i <lastName.length();i++){
        char c = lastName.charAt(i);  
        if((c<97 || c>122) && (c<65 || c>90)) {
         JOptionPane.showMessageDialog(null, "Enterprise Admin Name field should contain only alphabet", "Mismatch", JOptionPane.WARNING_MESSAGE);
         return false;
        }
        }
        
        String age = ageJTextField.getText();
        for(int i = 0; i <age.length();i++){
        char c = age.charAt(i);  
        if((c<48 || c>57))  {
         JOptionPane.showMessageDialog(null, "Age field should contain only number", "Mismatch", JOptionPane.WARNING_MESSAGE);
         return false;
        }
        }
        return true;
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        enterpriseJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        networkJComboBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        enterpriseJComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        usernameJTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        firstNameJTextField = new javax.swing.JTextField();
        submitJButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        lastNameJTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        ageJTextField = new javax.swing.JTextField();
        backJButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        deleteUaJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        enterpriseJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Enterprise Name", "Network", "Username", "Person FirstName"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(enterpriseJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 502, 88));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Network");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 200, 100, 30));

        networkJComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        networkJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkJComboBoxActionPerformed(evt);
            }
        });
        add(networkJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 200, 160, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Enterprise");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 250, 90, 30));

        enterpriseJComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        enterpriseJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterpriseJComboBoxActionPerformed(evt);
            }
        });
        add(enterpriseJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 250, 160, 30));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Username");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 310, 90, 30));

        usernameJTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        add(usernameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 310, 170, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Password");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 370, 110, 30));

        passwordField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        add(passwordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 370, 170, 30));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("First Name");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 430, 110, 30));

        firstNameJTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        firstNameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameJTextFieldActionPerformed(evt);
            }
        });
        add(firstNameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 430, 170, 30));

        submitJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        submitJButton.setText("Submit >>");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });
        add(submitJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 630, -1, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Last Name");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 490, 120, 30));

        lastNameJTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lastNameJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameJTextFieldActionPerformed(evt);
            }
        });
        add(lastNameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 490, 170, 30));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Age");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 550, 110, 30));

        ageJTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ageJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageJTextFieldActionPerformed(evt);
            }
        });
        add(ageJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 550, 170, 30));

        backJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 630, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setText("MANAGE ENTERPRISE ADMIN");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 20, 380, 30));

        deleteUaJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        deleteUaJButton.setText("Delete Enterprise >>");
        deleteUaJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUaJButtonActionPerformed(evt);
            }
        });
        add(deleteUaJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 630, 200, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void networkJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkJComboBoxActionPerformed

        Network network = (Network) networkJComboBox.getSelectedItem();
        if (network != null){
            populateEnterpriseComboBox(network);
        }

    }//GEN-LAST:event_networkJComboBoxActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

        Boolean flag = validation();
        if(flag) {
            
        Network network = (Network) networkJComboBox.getSelectedItem();
        Enterprise enterprise = (Enterprise) enterpriseJComboBox.getSelectedItem();
        
        if (network == null || enterprise == null || usernameJTextField.getText().equals("") || firstNameJTextField.getText().equals("") || lastNameJTextField.getText().equals("") || ageJTextField.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Invalid Input. Please fill in all the fileds");
            return;
        }
        
        
        
        for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
           
            for (Person person : ent.getPersonDirectory().getPersonList()) {
                   
                    if (person.getCountryName().equals(String.valueOf(networkJComboBox.getSelectedItem()))) {
                           
                        JOptionPane.showMessageDialog(null, "There can be only one admin for an enterprise.");
                        return;
                    }
                
            }
        }
       
        
        
        String username = usernameJTextField.getText();
        String password = String.valueOf(passwordField.getPassword());
        String firstName = firstNameJTextField.getText();
        String lastName = lastNameJTextField.getText();
        int age = Integer.parseInt(ageJTextField.getText());
        String country = String.valueOf(networkJComboBox.getSelectedItem());
        

        for (Network n : system.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                  for (UserAccount ua1 : e.getUserAccountDirectory().getUserAccountList()) {
                        if (ua1.getUserName().equals(username)) {
                            JOptionPane.showMessageDialog(null, "UserName already exists. Please use another name");
                            return;
                        }
                    } 
                
            }
        }
        
        for (Network n1 : system.getNetworkList()) {
            for (Enterprise e1 : n1.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organization org : e1.getOrganizationDirectory().getOrganizationList()) {
                  for (UserAccount ua2 : org.getUserAccountDirectory().getUserAccountList()) {
                        if (ua2.getUserName().equals(username)) {
                            JOptionPane.showMessageDialog(null, "UserName already exists. Please use another name");
                            return;
                        }
                    } 
                }
            }
        }
        
        for (UserAccount ua2 : system.getUserAccountDirectory().getUserAccountList()) {
            
            if (ua2.getUserName().equals(username)) {
                JOptionPane.showMessageDialog(null, "UserName already exists. Please use another name");
                            return;
            }
            
        }
        
        Person person = enterprise.getPersonDirectory().createPerson(firstName,lastName,age,country);
       // Person person = enterprise.getPersonDirectory().createEnterprisePerson(username);

        
        
        for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
            if(userAccount.getUserName().equals(username)) {
                JOptionPane.showMessageDialog(null, "UserName Already exists. Please use another name");
                return;
            }
        }
        
        for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
            if(userAccount.getPerson().equals(person)) {
                JOptionPane.showMessageDialog(null, "UserName Already exists for this person");
                return;
            }
        }
        
        AdminOrganization adminOrganization = new AdminOrganization();
        enterprise.getOrganizationDirectory().getOrganizationList().add(adminOrganization);
        ConsumerOrganization consumerOrganization = new ConsumerOrganization();
        enterprise.getOrganizationDirectory().getOrganizationList().add(consumerOrganization);
        
        UserAccount account = enterprise.getUserAccountDirectory().createUserAccount(username, password, person, new AdminRole());
        populateTable();
        usernameJTextField.setText("");
        passwordField.setText("");
        firstNameJTextField.setText("");
        lastNameJTextField.setText("");
        ageJTextField.setText("");
        
        JOptionPane.showMessageDialog(null, "Enterprise Admin has created successfully", "Success", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void lastNameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameJTextFieldActionPerformed

    private void ageJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageJTextFieldActionPerformed

    private void firstNameJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameJTextFieldActionPerformed

    private void deleteUaJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUaJButtonActionPerformed
        int selectedRow = enterpriseJTable.getSelectedRow();
        if(selectedRow>=0){
            int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete", "Warning", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                UserAccount userAccount  =(UserAccount)enterpriseJTable.getValueAt(selectedRow,2);
                Person person = (Person) enterpriseJTable.getValueAt(selectedRow, 3);
                Enterprise enterprise = (Enterprise) enterpriseJComboBox.getSelectedItem();
                enterprise.getUserAccountDirectory().deleteUserAccount(userAccount);
                enterprise.getPersonDirectory().deletePerson(person);
                populateTable();
            }
        }
        else{
            JOptionPane.showMessageDialog(this,"Please select a UserAccount to delete");
        }
    }//GEN-LAST:event_deleteUaJButtonActionPerformed

    private void enterpriseJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterpriseJComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enterpriseJComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ageJTextField;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton deleteUaJButton;
    private javax.swing.JComboBox enterpriseJComboBox;
    private javax.swing.JTable enterpriseJTable;
    private javax.swing.JTextField firstNameJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastNameJTextField;
    private javax.swing.JComboBox networkJComboBox;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JButton submitJButton;
    private javax.swing.JTextField usernameJTextField;
    // End of variables declaration//GEN-END:variables
}
